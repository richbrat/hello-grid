
// 
// 
//  (                                (   (   (      
//  )\ )   (     (            (      )\ ))\ ))\ )   
// (()/(   )\    )\ )   (     )\ )  (()/(()/(()/(   
//  /(_)|(((_)( (()/(   )\   (()/(   /(_))(_))(_))  
// (_))  )\ _ )\ /(_))_((_)   /(_))_(_))(_))(_))_   
// | _ \ (_)_\(_|_)) __| __| (_)) __| _ \_ _||   \  
// |   /  / _ \   | (_ | _|    | (_ |   /| | | |) | 
// |_|_\ /_/ \_\   \___|___|    \___|_|_\___||___/  
//                                                  
// 
// Along with _grid-config.scss, this is the grid! In _grid-config.scss there
// are some useful mixins, examples of how to use these mixins can be found in
// irrelevant-for-the-grid.scss. Otherwise, that file only contains grid 
// related styles making those cols and wrappers look nice. Please have a look
// though to see how to actually use the grid.
// 
// 
// https://css-tricks.com/useful-nth-child-recipies/
// https://css-tricks.com/examples/nth-child-tester/
// 
// ###########################################################################


@import 'grid-config';


// The grid

	.wrapper {
		width: 100%;
	}

	.grid {
		max-width: $grid-width;
		margin: 0 auto;
		padding: 0 20px;

		@if variable-exists( grid-background-color ) {
			background: $grid-background-color;
		}

		&.full {
			padding-right: 0;

			[class*='col-'] {
				padding: 0 $gutter 0 0;
			}
		}
	}

	[class*='col-'] {
		float: left;
	}

	@each $name, $width in $col-widths {
		div.#{$name} {
			width: $width
		}
	}

	@each $name, $width in $offset-widths {
		div.#{$name} {
			margin-left: $width
		}
	}

	.grid:after {
		content: "";
		display: table;
		clear: both;
	}

	*, *:after, *:before {
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		box-sizing: border-box;
	}

	[class*='col-'] {
		padding-right: $gutter;
	}
	[class*='col-1-1'] {
		padding-right: 0;
	}
	[class*='col-']:last-of-type {
		padding-right: 0;
	}
	[class*='col-1-1']:last-of-type {
		margin-right: 20px;

		@media ( max-width: $tablet ) {
			padding-right: 0;
		}
	}

