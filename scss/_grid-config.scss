
// If you need to set other values to these variables you can add your own 
// sass config file and overwrite them as long as that fil is imported 
// after this fil and before _grid.scss.

$grid-width:  980px;
$gutter:      20px;

$desktop:     1020px;
$tablet:      768px;
$mini-tablet: 620px;
$mobile:      480px;

$grid-background-color: #fff;

$col-widths: (
	col-1-1: 100%,
	col-3-4: 75%,
	col-2-3: 66.66%,
	col-3-5: 60%,
	col-1-2: 50%,
	col-2-5: 40%,
	col-1-3: 33.33%,
	col-1-4: 25%,
	col-1-5: 20%,
	col-1-8: 12.5%
);

$offset-widths: (
	offset-3-4: 75%,
	offset-2-3: 66.66%,
	offset-3-5: 60%,
	offset-1-2: 50%,
	offset-2-5: 40%,
	offset-1-3: 33.33%,
	offset-1-4: 25%,
	offset-1-5: 20%,
	offset-1-8: 12.5%
);


// Useful mixins (see '_irrelevant-for-the-grid.scss' on how to use it)


	// 'full-bg' adds a full width background color

	@mixin full-bg( $color ) {
		background: $color;

		.grid {
			background: $color;
		}
	}


	// 'columns' is an experimental feature so far, use with caution. It is 
	// supposed to add responsiveness to a div pattern.

	@mixin columns( $desktop-cols, $tablet-cols, $mini-tablet-cols, $mobile-cols ) {
		&:nth-of-type(#{$desktop-cols}n+1) {
			clear: left;
		}

		@media ( max-width: $tablet ) {
			@include set-column( $desktop-cols, $tablet-cols );
		}
		@media ( max-width: $mini-tablet ) {
			@include set-column( $tablet-cols, $mini-tablet-cols );
		}
		@media ( max-width: $mobile ) {
			@include set-column( $mini-tablet-cols, $mobile-cols );
		}
	}


	// 'set-column' is only a helper mixin for the 'columns' mixin and is 
	// not to be used separately (unless you know what you are doing).

	@mixin set-column( $old, $new ) {
		$col-name: col-1-#{$new};
		$width: map-get( $col-widths, $col-name );
		
		width: $width;

		&:nth-of-type( #{$new}n+1 ) {
			clear: left;
		}

		@if $new != $old {
			&:nth-of-type(#{$old}n+1) {
				clear: none;
			}
		}
	}
